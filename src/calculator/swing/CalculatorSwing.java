package calculator.swing;

/**
 * Basic calculator program implemented using swing toolkit
 * @author Keyikedalube
 */
public class CalculatorSwing extends javax.swing.JFrame {
    
    private String inputLabel;      // for splitting operand1 and operand2
    private String stringLabel;     // for printing purposes
    
    private double operand1;
    private double operand2;
    private char operator;
    private boolean emptyOperand1;  // for toggling operand1 value status
    private boolean emptyOperand2;  // for toggling operand2 value status
    private double result;          // stores the computed mathematical result
    
    /**
     * Creates new form CalculatorSwing
     */
    public CalculatorSwing() {
        stringLabel = new String();
        inputLabel = new String();
        operand1 = operand2 = 0.0;
        emptyOperand1 = emptyOperand2 = true;
        result = 0.0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayLabel = new javax.swing.JLabel();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        buttonPoint = new javax.swing.JButton();
        buttonPlus = new javax.swing.JButton();
        buttonMinus = new javax.swing.JButton();
        buttonEqual = new javax.swing.JButton();
        buttonDivide = new javax.swing.JButton();
        buttonProduct = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(500, 250));
        setMaximumSize(new java.awt.Dimension(0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(279, 240));

        displayLabel.setBackground(new java.awt.Color(255, 255, 255));
        displayLabel.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 18)); // NOI18N
        displayLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        displayLabel.setOpaque(true);
        displayLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                displayLabelKeyTyped(evt);
            }
        });

        button1.setText("1");
        button1.setDefaultCapable(false);
        button1.setFocusable(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setText("2");
        button2.setDefaultCapable(false);
        button2.setFocusable(false);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button3.setText("3");
        button3.setDefaultCapable(false);
        button3.setFocusable(false);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button4.setText("4");
        button4.setDefaultCapable(false);
        button4.setFocusable(false);
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        button5.setText("5");
        button5.setDefaultCapable(false);
        button5.setFocusable(false);
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });

        button6.setText("6");
        button6.setDefaultCapable(false);
        button6.setFocusable(false);
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });

        button7.setText("7");
        button7.setDefaultCapable(false);
        button7.setFocusable(false);
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });

        button8.setText("8");
        button8.setDefaultCapable(false);
        button8.setFocusable(false);
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });

        button9.setText("9");
        button9.setDefaultCapable(false);
        button9.setFocusable(false);
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });

        button0.setText("0");
        button0.setDefaultCapable(false);
        button0.setFocusable(false);
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });

        buttonPoint.setText(".");
        buttonPoint.setDefaultCapable(false);
        buttonPoint.setFocusable(false);
        buttonPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPointActionPerformed(evt);
            }
        });

        buttonPlus.setText("+");
        buttonPlus.setDefaultCapable(false);
        buttonPlus.setFocusable(false);
        buttonPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlusActionPerformed(evt);
            }
        });

        buttonMinus.setText("-");
        buttonMinus.setDefaultCapable(false);
        buttonMinus.setFocusable(false);
        buttonMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMinusActionPerformed(evt);
            }
        });

        buttonEqual.setText("=");
        buttonEqual.setFocusable(false);
        buttonEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEqualActionPerformed(evt);
            }
        });

        buttonDivide.setText("/");
        buttonDivide.setDefaultCapable(false);
        buttonDivide.setFocusable(false);
        buttonDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivideActionPerformed(evt);
            }
        });

        buttonProduct.setText("*");
        buttonProduct.setDefaultCapable(false);
        buttonProduct.setFocusable(false);
        buttonProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProductActionPerformed(evt);
            }
        });

        buttonClear.setBackground(new java.awt.Color(255, 102, 102));
        buttonClear.setText("C");
        buttonClear.setDefaultCapable(false);
        buttonClear.setFocusable(false);
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(buttonPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonEqual, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(displayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button2)
                            .addComponent(button3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button5)
                            .addComponent(button6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button8)
                            .addComponent(button9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonEqual)
                                .addComponent(buttonClear))
                            .addComponent(button0)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPoint))))
        );

        displayLabel.setFocusable(true);

        getAccessibleContext().setAccessibleDescription("A calculator that does basic math");

        pack();
    }// </editor-fold>//GEN-END:initComponents




    /**
     * Since the data type of result is double, 1 + 1 yields 2.0
     * <br />
     * To avoid printing those trailing zeros, this function will pretty format it.
     * <list>
     * <li>Format result to int if it's trailing with zeros after "."</li>
     * <br />
     * <li>Otherwise will format to String as it is.</li>
     * </list><br/>
     * And return them as String to the calling function
     * <p><em>
     * Sourced from StackOverflow: How to nicely format floating numbers to String
     * <br />
     * without unnecessary decimal 0?
     * </em></p>
     * @return String
     */
    private String formatResult() {
        if (result == (long) result)
            return String.format("%d", (long) result);
        else
            return String.format("%s", result);
    }
    
    
    
    
    /**
     * This will be called when
     * "=" button is clicked or
     * "Enter" button is pressed
     */
    private void equateEvent() {
        // If event occurs before any expression exists, then avoid parsing an
        // empty string
        // Also, make sure that we're not parsing operand2 while emptyOperand1
        // is still true
        if (!stringLabel.equals("") && !emptyOperand1) {
            try {
                operand2 = Double.parseDouble(inputLabel);
                // Avoid performOperation if previous result i.e., inputLabel 
                // equals with the current stringLabel
                if (!inputLabel.equals(stringLabel))
                    performOperation();
                inputLabel = stringLabel;
                displayLabel.setText(formatResult());
            } catch (NumberFormatException ex) {
                    displayLabel.setText("Invalid equation!");
            }
        }
    }

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button1ActionPerformed
    
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button5ActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button6ActionPerformed

    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button7ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button8ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        trimFirst();
        inputLabel += evt.getActionCommand();
        stringLabel += evt.getActionCommand();
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button9ActionPerformed

    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
        trimFirst();
        // Make sure the user doesn't deliberately try to divide operand1 by 0
        if (!stringLabel.endsWith(" / ")) {
            inputLabel += evt.getActionCommand();
            stringLabel += evt.getActionCommand();
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_button0ActionPerformed

    private void buttonPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPointActionPerformed
        trimFirst();
        // Make sure last string does not end with "." already to avoid
        // multiple occurrence of "."
        // ex:- 5...010
        if (!inputLabel.endsWith(".")) {
            // Avoid multiple occurence of "." in between numbers
            // ex:- 1.023.232.
            if (!inputLabel.contains(".")) {
                inputLabel += evt.getActionCommand();
                stringLabel += evt.getActionCommand();
            }
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_buttonPointActionPerformed

    private void buttonPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlusActionPerformed
        if (stringLabel.equals(" - ")) {
            // Toggle - sign to +
            // using actual '+' will cause a bug ie., input like '-+5+5+' is
            // represented as +5+5+ which invalids the getOperand1 for '+'
            // condition and is skipped, causing the program to catch
            // NumberFormatException.
            // Empty string is the best way to get the program running without
            // '+' string issues. After all, empty string is also still a '+'
            inputLabel = inputLabel.replace(inputLabel, "+");
            stringLabel = stringLabel.replace('-', '+');
        } else {
            if (checkLastOperator())
                // Do nothing but jump ahead and print the previous string only
                ;
            else {
                inputLabel += evt.getActionCommand();
                stringLabel += " + ";
            }
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_buttonPlusActionPerformed

    private void buttonEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEqualActionPerformed
        equateEvent();
    }//GEN-LAST:event_buttonEqualActionPerformed

    private void buttonProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProductActionPerformed
        // To avoid product operator as the first string
        if (stringLabel.equals(""))
            displayLabel.setText(stringLabel);
        else if (checkLastOperator())
            displayLabel.setText(stringLabel);
        else {
            inputLabel += evt.getActionCommand();
            stringLabel += " * ";
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_buttonProductActionPerformed

    private void buttonMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMinusActionPerformed
        if (stringLabel.equals(" + ")) {
            // Toggle + sign to -
            inputLabel = inputLabel.replace('+', '-');
            stringLabel = stringLabel.replace('+', '-');
        } else {
            if (checkLastOperator())
                // Do nothing but jump ahead and print the previous string only
                ;
            else {
                inputLabel += evt.getActionCommand();
                stringLabel += " - ";
            }
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_buttonMinusActionPerformed

    private void buttonDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivideActionPerformed
        // To avoid division operator as the first string
        if (stringLabel.equals(""))
            displayLabel.setText(stringLabel);
        else if (checkLastOperator())
            displayLabel.setText(stringLabel);
        else {
            inputLabel += evt.getActionCommand();
            stringLabel += " / ";
        }
        getOperandsAndUpdatedisplayLabel();
    }//GEN-LAST:event_buttonDivideActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        // Clear the string
        stringLabel = inputLabel = "";
        emptyOperand1 = emptyOperand2 = true;
        displayLabel.setText(null);
    }//GEN-LAST:event_buttonClearActionPerformed




    /**
     * This will process the key typed event
     * @param inputChar 
     */
    private void processKeyTyped(char inputChar) {
        trimFirst();
        inputLabel += inputChar;
        stringLabel += inputChar;
        getOperandsAndUpdatedisplayLabel();
    }

    private void displayLabelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayLabelKeyTyped
        // TODO add your handling code here:
        char inputChar = evt.getKeyChar();
        switch (inputChar) {
            case '0':
                // Make sure the user doesn't deliberately try to divide operand1 by 0
                if (!stringLabel.endsWith(" / "))
                    processKeyTyped(inputChar);
                break;
            case '1':
                processKeyTyped(inputChar);
                break;
            case '2':
                processKeyTyped(inputChar);
                break;
            case '3':
                processKeyTyped(inputChar);
                break;
            case '4':
                processKeyTyped(inputChar);
                break;
            case '5':
                processKeyTyped(inputChar);
                break;
            case '6':
                processKeyTyped(inputChar);
                break;
            case '7':
                processKeyTyped(inputChar);
                break;
            case '8':
                processKeyTyped(inputChar);
                break;
            case '9':
                processKeyTyped(inputChar);
                break;
            case '.':
                // Make sure last string does not end with "." already to avoid
                // multiple occurrence of "."
                // ex:- 5...010
                if (!inputLabel.endsWith("."))
                    // Avoid multiple occurence of "."
                    // ex:- 1.023.232.
                    if (!inputLabel.contains("."))
                        processKeyTyped(inputChar);
                break;
            case '+':
                if (stringLabel.equals(" - ")) {
                    // Toggle - sign to +
                    inputLabel = inputLabel.replace('-', '+');
                    stringLabel = stringLabel.replace('-', '+');
                } else {
                    if (checkLastOperator())
                        // Do nothing but jump ahead and print the previous string only
                        ;
                    else {
                        inputLabel += inputChar;
                        stringLabel += " + ";
                    }
                }
                getOperandsAndUpdatedisplayLabel();
                break;
            case '-':
                if (stringLabel.equals(" + ")) {
                    // Toggle + sign to -
                    inputLabel = inputLabel.replace('+', '-');
                    stringLabel = stringLabel.replace('+', '-');
                } else {
                    if (checkLastOperator())
                        // Do nothing but jump ahead and print the previous string only
                        ;
                    else {
                        inputLabel += inputChar;
                        stringLabel += " - ";
                    }
                }
                getOperandsAndUpdatedisplayLabel();
                break;
            case '/':
                // To avoid division operator as the first string
                if (stringLabel.equals(""))
                    displayLabel.setText(stringLabel);
                // To avoid multiple occurence of the same operator
                // or series of operators instead of numbers
                else if (checkLastOperator())
                    displayLabel.setText(stringLabel);
                else {
                    inputLabel += inputChar;
                    stringLabel += " / ";
                }
                getOperandsAndUpdatedisplayLabel();
                break;
            case '*':
                // To avoid product operator as the first string
                if (stringLabel.equals(""))
                    displayLabel.setText(stringLabel);
                // To avoid multiple occurence of the same operator
                // or series of operators instead of numbers
                else if (checkLastOperator())
                    displayLabel.setText(stringLabel);
                else {
                    inputLabel += inputChar;
                    stringLabel += " * ";
                }
                getOperandsAndUpdatedisplayLabel();
                break;
            case '\n':
                equateEvent();
        }
    }//GEN-LAST:event_displayLabelKeyTyped

    /**
     * Will avoid printing series of operators if user inputs so
     * <br />
     * ex:- 3 + - * /
     */
    private boolean checkLastOperator() {
        if (
                stringLabel.endsWith(" + ") ||
                stringLabel.endsWith(" - ") ||
                stringLabel.endsWith(" / ") ||
                stringLabel.endsWith(" * "))
            return true;
        else
            return false;
    }
    
    /**
     * Trims extra white-spaces if operator is the first string.
     * <br />
     * After trimming, the operator precedes the number.
     * <br />
     * ex:- "-1" not "- 1"
     */
    private void trimFirst() {
        switch (stringLabel) {
            case " + ":
                // Better not displaying + symbol to make the output look simple
                stringLabel = "";
                break;
            case " - ":
                stringLabel = "-";
                break;
        }
    }
    
    /**
     * The final steps to getOperand1().
     */
    private void parseOperand1() {
        operand1 = Double.parseDouble(inputLabel);
//        System.out.println("operand1: " + operand1);
        // clear inputLabel so operand2 is easy to be parsed without
        // complicated string manipulation
        inputLabel = "";
        emptyOperand1 = false;
    }
    /**
     * Get operand1 when number(s) is suffixed by any of the following operator:
     * <br/>
     * &nbsp;&nbsp;&nbsp;&nbsp;+
     * <br/>
     * &nbsp;&nbsp;&nbsp;&nbsp;-
     * <br />
     * &nbsp;&nbsp;&nbsp;&nbsp;/
     * <br />
     * &nbsp;&nbsp;&nbsp;&nbsp;*
     * <br />
     */
    private void getOperand1() {
        if (!inputLabel.equals("+") && inputLabel.endsWith("+")) {
            operator = '+';
            inputLabel = inputLabel.replace("+", "");
            parseOperand1();
        } else if (!inputLabel.equals("-") && inputLabel.endsWith("-")) {
            operator = '-';
            // avoid replacing the first '-' as it's part of the operand1
            if (inputLabel.startsWith("-")) {
                char[] temporaryString = inputLabel.toCharArray();
                temporaryString[temporaryString.length - 1] = '\0';
                inputLabel = String.valueOf(temporaryString);
            } else
                inputLabel = inputLabel.replace("-", "");
            parseOperand1();
        } else if (inputLabel.endsWith("/")) {
            operator = '/';
            inputLabel = inputLabel.replace("/", "");
            parseOperand1();
        } else if (stringLabel.endsWith(" * ")) {
            operator = '*';
            inputLabel = inputLabel.replace("*", "");
            parseOperand1();
        }
    }
    
    /**
     * This will be invoked after getOperand2() successfully gets operand2 value
     * <br />
     * Performs actual mathematical operation
     */
    private void performOperation() {
        switch (operator) {
            case '+':
                result = operand1 + operand2;
                break;
            case '-':
                result = operand1 - operand2;
                break;
            case '/':
                result = operand1 / operand2;
                break;
            case '*':
                result = operand1 * operand2;
        }
        emptyOperand1 = true;
//        System.out.println("result: " + result);
        stringLabel = formatResult();
    }
            
    /**
     * Get operand2 when number(s) is suffixed by any of the following operator:
     * <br/>
     * &nbsp;&nbsp;&nbsp;&nbsp;+
     * <br/>
     * &nbsp;&nbsp;&nbsp;&nbsp;-
     * <br />
     * &nbsp;&nbsp;&nbsp;&nbsp;/
     * <br />
     * &nbsp;&nbsp;&nbsp;&nbsp;*
     * <br />
     */
    private void getOperand2() {
        if (inputLabel.endsWith("+")) {
            inputLabel = inputLabel.replace("+", "");
            operand2 = Double.parseDouble(inputLabel);
            performOperation();
            inputLabel = stringLabel + "+";
            stringLabel += " + ";
            displayLabel.setText(stringLabel);
        } else if (inputLabel.endsWith("-")) {
            inputLabel = inputLabel.replace("-", "");
            operand2 = Double.parseDouble(inputLabel);
            performOperation();
            inputLabel = stringLabel + "-";
            stringLabel += " - ";
            displayLabel.setText(stringLabel);
        } else if (inputLabel.endsWith("/")) {
            inputLabel = inputLabel.replace("/", "");
            operand2 = Double.parseDouble(inputLabel);
            performOperation();
            inputLabel = stringLabel + "/";
            stringLabel += " / ";
            displayLabel.setText(stringLabel);
        } else if (inputLabel.endsWith("*")) {
            inputLabel = inputLabel.replace("*", "");
            operand2 = Double.parseDouble(inputLabel);
            performOperation();
            inputLabel = stringLabel + "*";
            stringLabel += " * ";
            displayLabel.setText(stringLabel);
        }
        // Since the user continues to operate by trailing the last string with
        // some operator, it's necessary to get operand1 value as soon as the
        // previous performOperation() completes.
        getOperand1();
    }
    
    /**
     * This will be executed at every event extracting operand1 & operand2
     */
    private void getOperandsAndUpdatedisplayLabel() {
        if (emptyOperand1)
            getOperand1();
        else if (emptyOperand2)
            getOperand2();
        displayLabel.setText(stringLabel);
    }
    



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorSwing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDivide;
    private javax.swing.JButton buttonEqual;
    private javax.swing.JButton buttonMinus;
    private javax.swing.JButton buttonPlus;
    private javax.swing.JButton buttonPoint;
    private javax.swing.JButton buttonProduct;
    private javax.swing.JLabel displayLabel;
    // End of variables declaration//GEN-END:variables
}
